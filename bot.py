from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
import aiohttp
import asyncio
from datetime import time

# Ton token Telegram
TOKEN = "7511100441:AAGtgLZeSyIrkK4No4luBF7TdzP5J6cQThI"

# Ta cl√© API OpenWeatherMap
WEATHER_API_KEY = "b7627b3f7c126fbb649a846c7953ff21"

# Dictionnaire des villes avec emojis
VILLES = {
    "Rieux,FR": "ü©∑ RIEUX",
    "Chamb√©ry,FR": "üíõ CHAMB√âRY",
    "La Chapelle-Bou√´xic,FR": "üñ§ LA CHAPELLE-BOU√ãXIC",
    "Gen√®ve,CH": "üíö GEN√àVE",
    "Bristol,GB": "üíô BRISTOL",
    "Roncq,FR": "üíú RONCQ",
    "Mont√©limar,FR": "ü§ç MONT√âLIMAR",
}

async def get_weather(city):
    """R√©cup√®re la m√©t√©o actuelle pour une ville donn√©e."""
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=fr"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                temp = data["main"]["temp"]
                description = data["weather"][0]["description"]
                return f"{VILLES[city]} : {temp}¬∞C, {description}"
            else:
                return f"{VILLES[city]} : Impossible de r√©cup√©rer la m√©t√©o."

async def get_daily_forecast(city):
    """R√©cup√®re les pr√©visions g√©n√©rales pour la journ√©e."""
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=fr&cnt=8"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                # On prend la premi√®re pr√©vision de la journ√©e
                forecast = data["list"][0]
                temp = forecast["main"]["temp"]
                description = forecast["weather"][0]["description"]
                return f"{VILLES[city]} : {temp}¬∞C, {description}"
            else:
                return f"{VILLES[city]} : Impossible de r√©cup√©rer les pr√©visions."

async def send_daily_forecast(context: CallbackContext):
    """Envoie les pr√©visions quotidiennes automatiquement."""
    weather_reports = [await get_daily_forecast(city) for city in VILLES]
    message = "üå§Ô∏è Pr√©visions du jour :\n" + "\n".join(weather_reports) + "\n\nBonne journ√©e !"
    chat_id = context.job.chat_id
    await context.bot.send_message(chat_id=chat_id, text=message)

async def start(update: Update, context: CallbackContext) -> None:
    """Commande /start"""
    await update.message.reply_text("Bonjour ! Tape /meteo pour voir la m√©t√©o actuelle des villes s√©lectionn√©es.")

async def meteo(update: Update, context: CallbackContext) -> None:
    """Affiche la m√©t√©o en direct sur commande."""
    weather_reports = [await get_weather(city) for city in VILLES]
    message = "üî• M√©t√©o en direct :\n" + "\n".join(weather_reports)
    await update.message.reply_text(message)

async def schedule_weather(update: Update, context: CallbackContext):
    """Programme l‚Äôenvoi automatique des pr√©visions √† 9h."""
    chat_id = update.message.chat_id
    context.job_queue.run_daily(send_daily_forecast, time=time(hour=8, minute=0), chat_id=chat_id)
    await update.message.reply_text("‚úÖ Pr√©visions quotidiennes programm√©es √† 9h !")

def main():
    print("D√©marrage du bot...")
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("meteo", meteo))
    application.add_handler(CommandHandler("setmeteo", schedule_weather))

    print("Lancement du polling...")
    application.run_polling()

if __name__ == '__main__':
    main()
